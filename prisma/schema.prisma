// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Projects[]
  notion_accounts NotionAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MyTable {
  id        String   @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
}

model MyDocuments {
  id        String   @id @default(cuid())
  uploadId  String
  fileName  String?
  createdAt DateTime @default(now())
}

model Projects {
  id            String    @id @default(cuid())
  code          String?   @unique @db.VarChar(255)
  title         String    @db.VarChar(255)
  tooltip       String?
  welcome       String?
  placeholder   String?
  setting       String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     Documents[]
  links         Links[]
  conversations Conversations[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Documents {
  id          String    @id @default(cuid())
  fileName    String?
  uploadId    String
  projectId   String
  project     Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Links {
  id          String    @id @default(cuid())
  url         String?
  uploadId    String
  projectId   String
  project     Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Conversations {
  id          String    @id @default(cuid())
  name        String?
  email       String?
  projectId   String
  project     Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages    Messages[]
  isAdmin     Boolean   @default(false)
  isRead      Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

model Messages {
  id                String    @id @default(cuid())
  conversationId    String
  conversation      Conversations  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message           String
  speaker           Speaker   @default(USER)
  createdAt         DateTime  @default(now())
}

enum Speaker {
  USER
  AI
  ADMIN
}

model NotionAccount {
  id             String  @id @default(cuid())
  user_id        String
  type           String?
  userNotion_id  String
  refresh_token  String?
  access_token   String  @db.Text
  workspace_name String? @db.Text
  workspace_id   String?
  template_id    String?
  email_notion   String? @db.Text

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
